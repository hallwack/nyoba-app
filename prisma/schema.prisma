// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model User {
    id            String     @id @default(cuid())
    name          String
    email         String     @unique
    password      String
    address       String?
    phoneNumber   String?
    emailVerified DateTime?
    image         String?
    createdAt     DateTime   @default(now())
    updatedAt     DateTime?  @updatedAt
    roles         RoleUser[]
}

model Role {
    id          Int              @id @default(autoincrement())
    name        String
    description String?
    createdAt   DateTime         @default(now())
    updatedAt   DateTime?        @updatedAt
    users       RoleUser[]
    permissions RolePermission[]
}

model Permission {
    id          Int              @id @default(autoincrement())
    name        String
    description String?
    createdAt   DateTime         @default(now())
    updatedAt   DateTime?        @updatedAt
    role        RolePermission[]
}

model RoleUser {
    id        Int       @id @default(autoincrement())
    role      Role      @relation(fields: [roleId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    roleId    Int
    user      User      @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    userId    String
    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt
}

model RolePermission {
    id           Int        @id @default(autoincrement())
    role         Role       @relation(fields: [roleId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    roleId       Int
    permission   Permission @relation(fields: [permissionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    permissionId Int
    createdAt    DateTime   @default(now())
    updatedAt    DateTime?  @updatedAt
}
